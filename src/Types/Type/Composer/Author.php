<?php

namespace Hurah\Types\Type\Composer;

use Hurah\Types\Exception\InvalidArgumentException;
use Hurah\Types\Type\AbstractDataType;
use Hurah\Types\Type\IGenericDataType;

class Author extends AbstractDataType implements IGenericDataType, IComposerComponent
{

    /**
     * @param null $aValue , an array of Author components
     * @throws InvalidArgumentException
     */
    public function __construct($aValue = null)
    {
        if (is_iterable($aValue)) {
            $aComponents = [];
            foreach ($aValue as $sKey => $mValue) {
                if ($sKey == 'email' && $mValue) {
                    $aComponents[] = new Email($mValue);
                } else {
                    if ($sKey == 'name' && $mValue) {
                        $aComponents[] = new Name($mValue);
                    } else {
                        if (!$mValue instanceof IAuthorComponent) {
                            throw new InvalidArgumentException("The constructor of " . __CLASS__ . " expects an array of IAuthorComponent objects or null  ");
                        }
                    }
                }
            }
            if ($aComponents) {
                $aValue = $aComponents;
            }
        } else {
            throw new InvalidArgumentException("A composer dependency consists of 2 parts, a package name and a version.");
        }
        parent::__construct($aValue);
    }

    /**
     * @param array $aData
     * @return static
     * @throws InvalidArgumentException
     */
    public static function fromArray(array $aData): self
    {
        $aAuthor = [];
        if (isset($aData['name'])) {
            $aAuthor[] = new Name($aData['name']);
        }
        if (isset($aData['email'])) {
            $aAuthor[] = new Email($aData['email']);
        }
        if (isset($aData['url'])) {
            $aAuthor[] = new Url($aData['url']);
        }
        if (isset($aData['role'])) {
            $aAuthor[] = new Role($aData['role']);
        }
        return new Author($aAuthor);
    }

    public function toArray(): array
    {
        $aValues = $this->getValue();
        $aAuthorComponents = [];
        if (is_iterable($aValues)) {
            foreach ($aValues as $oValue) {
                $aAuthorComponents[$oValue->getKey()] = $oValue->getValue();
            }
        }
        return $aAuthorComponents;
    }

    /**
     * @return IAuthorComponent[]
     */
    public function getValue(): array
    {
        return parent::getValue(); // TODO: Change the autogenerated stub
    }

    public function __toString(): string
    {
        $aAuthor = $this->getValue();
        return json_encode($aAuthor);
    }
}
